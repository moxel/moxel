#!/usr/bin/env python3
""" Runtime for docker containers.
"""
import os
import sys
import time
import argparse
from os.path import join, abspath, dirname, expanduser, exists, relpath
import yaml
import pexpect
import subprocess

DAEMON_VERSION = '0.0.1'
DUMMY_CONFIG = 'dummy.yml'

print('[daemon] {}'.format(DAEMON_VERSION))

parser = argparse.ArgumentParser()
parser.add_argument('--code_root', default='/code', type=str)
parser.add_argument('--asset_root', default='', type=str)
parser.add_argument('--work_path', default='./', type=str)
parser.add_argument('--assets', nargs='*', default=[], type=str)
parser.add_argument('--cmd', nargs='*', default=[], type=str)

args = parser.parse_args()

root = args.code_root
root = abspath(expanduser(root))

class GCloudStorageManager(object):
    """ Mount a GCloud Storage bucket as a volume.
    Security issues:
        - private keys shouldn't be mounted inside a docker container.
        - only the prefix user has access to should be mounted.
    TODO: we ignore these issues for MVP.
    """
    GCS_MOUNT = '/mnt/cloudfs'

    def __init__(self, bucket='dummy-dev', asset_root=''):
        self.bucket = bucket

        if not exists(self.GCS_MOUNT): os.makedirs(self.GCS_MOUNT)

        os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = '/secrets/gcloud.json'
        subprocess.check_output('gcsfuse --implicit-dirs --only-dir {} {} {}'# 2>&1 > /dev/null'
                                    .format(asset_root, bucket, self.GCS_MOUNT),
                                    shell=True)

    def mount(self, key, local_path):
        local_dir = dirname(local_path)
        if local_dir and not exists(local_dir): os.makedirs(local_dir)
        subprocess.check_output('ln -fs {} {}'
                                .format(join(self.GCS_MOUNT, key), local_path),
                                shell=True)


# Verify this is a Git repository
if not exists(join(root, '.git')):
    print('[daemon] This is not a valid git repository: {}'.format(root))
    exit(1)

os.chdir(args.code_root)

gcs_manager = GCloudStorageManager(bucket='dummy-dev', asset_root=args.asset_root)
for asset in args.assets:
    asset_path = relpath(join(args.work_path, asset), '.')
    print(asset_path)
    gcs_manager.mount(asset_path, asset_path)

print('[daemon] Running command {}'.format(' '.join(args.cmd)))
sys.stdout.flush() # make sure daemon outputs finish

os.chdir(args.work_path)
ret = os.system(' '.join(args.cmd))

if ret == 0:
    exit(ret)
else:
    print('Command failed. Suspending the container')
    while True:
        time.sleep(1.)
